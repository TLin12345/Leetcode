You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

Example1
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example2
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

/*code*/
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix.length == 0)
            return false;
        int m = matrix.length;//length of row
        int n = matrix[0].length;//length of col
        int low = 0, high = (m*n)-1;
        while (low <= high) {
            int mid = (low + high)/2;
            int row = mid/n;
            int col = mid%n;
            if (matrix[row][col] < target)
                low = mid + 1;
            else if (matrix[row][col] > target)
                high = mid - 1;
            else
                return true;
        }
        return false;//not found
    }
}