Given the root of a binary tree, invert the tree, and return its root.

Example 1:

Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Example 2:

Input: root = [2,1,3]
Output: [2,3,1]

Example 3:

Input: root = []
Output: []

Example 4:

Input: root = [1,2]
Output: [1,null,2]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        /* Code 1
        TreeNode current = root;
        TreeNode temp;
        while (current != null) {
            if (current.left == null && current.right == null) //only one node
                return root;
            else if (current.left != null && current.right == null) {
                temp = current.left;
                current.left = null;
                current.right = temp;
                invertTree(current.right);
            }
            else if (current.left == null && current.right != null) {
                temp = current.right;
                current.left = temp;
                current.right = null;
                invertTree(current.left);
            }
            else {
                temp = current.left;
                current.left = current.right;
                current.right = temp;
                invertTree(current.left);
                invertTree(current.right);
            }
            return current;
        } 
        return null;//empty tree
        */
        //Code 2 
        if (root == null)
            return null;
        TreeNode temp;
        temp = root.left;
        root.left = root.right;
        root.right = temp;
        invertTree(root.left);
        invertTree(root.right);
        return root;
    }
}