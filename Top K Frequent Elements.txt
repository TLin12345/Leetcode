Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:

Input: nums = [1], k = 1
Output: [1]


import java.util.*;

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        List<Integer> list = new ArrayList<>();
        if (nums.length < k)
           return nums;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : nums) {
            if (!map.containsKey(i)) {
                map.put(i, 1);
            }
            else 
                map.put(i, map.get(i)+1);
        }
        Queue<Integer> heap = new PriorityQueue<>((a, b) -> (map.get(b) - map.get(a)));
        for (int key : map.keySet())
             heap.add(key);

        int[] number = new int[k];
        for (int i = 0; i < k; i++) {
            number[i] = heap.poll();
        }
        return number;
    }
}