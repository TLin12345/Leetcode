Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

/*code*/
import java.util.*;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        if (nums.length < 3) 
            return null;
        Arrays.sort(nums);
        List<List<Integer>> triplets = new ArrayList<>();
        int i, n = nums.length, pt1, pt2;
        for (i = 0; i < n-2; i++) {
            if (i == 0 || (i > 0 && nums[i] != nums[i-1])) { 
                pt1 = i+1;
                pt2 = n-1;
                while (pt1 < pt2) {
                    if (nums[i] + nums[pt1] + nums[pt2] == 0) {
                        List<Integer> list = new ArrayList<>();
                        list.add(nums[i]);
                        list.add(nums[pt1]);
                        list.add(nums[pt2]);
                        triplets.add(list);
                        while (pt1 < pt2 && nums[pt1] == nums[pt1+1]) {
                            pt1++;
                        }
                        while (pt1 < pt2 && nums[pt2] == nums[pt2-1]) {
                            pt2--;
                        }
                        pt1++;
                        pt2--;
                    }
                    else if (nums[i] + nums[pt1] + nums[pt2] < 0) {
                        pt1++;
                    }
                    else {
                        pt2--;
                    }
                }
            }
        }
        return triplets;
    }
}