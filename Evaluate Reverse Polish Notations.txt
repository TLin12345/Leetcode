You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

/*code1*/
class Solution {
    public int evalRPN(String[] tokens) {
        int result = 0;
        Stack<Integer> s = new Stack<>();
        int operand1 = 0, operand2 = 0;
        if (tokens.length == 0)
            System.out.println("Empty array!");
        if (tokens.length == 1) 
            return Integer.parseInt(tokens[0]);
        for (String t : tokens) {
            if (!"+-*/".contains(t)) 
                s.push(Integer.parseInt(t));
            else {
                if (t.equals("+") && !s.isEmpty()) {
                    operand1 = s.pop();
                    operand2 = s.pop();
                    result = operand2 + operand1;
                    s.push(result);
                }
                if (t.equals("-") && !s.isEmpty()) {
                    operand1 = s.pop();
                    operand2 = s.pop();
                    result = operand2 - operand1;
                    s.push(result);
                }
                if (t.equals("*") && !s.isEmpty()) {
                    operand1 = s.pop();
                    operand2 = s.pop();
                    result = operand2 * operand1;
                    s.push(result);
                }
                if (t.equals("/") && !s.isEmpty()) {
                    operand1 = s.pop();
                    operand2 = s.pop();
                    result = operand2 / operand1;
                    s.push(result);
                }
            }
        }
        return result;
    }
}

/*code2*/
class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> s = new Stack<>();
        int operand1 = 0, operand2 = 0;
        for (int i = 0; i < tokens.length; i++) {
            if (tokens[i].equals("+") && !s.isEmpty()) {
                operand1 = s.pop();
                operand2 = s.pop();
                s.push(operand2 + operand1);
            }
            else if (tokens[i].equals("-") && !s.isEmpty()) {
                operand1 = s.pop();
                operand2 = s.pop();
                s.push(operand2 - operand1);
            }
            else if (tokens[i].equals("*") && !s.isEmpty()) {
                operand1 = s.pop();
                operand2 = s.pop();
                s.push(operand2 * operand1);
            }
            else if (tokens[i].equals("/") && !s.isEmpty()) {
                operand1 = s.pop();
                operand2 = s.pop();
                s.push(operand2 / operand1);
            }
            else {
                s.push(Integer.valueOf(tokens[i]));
            }
        }
        return s.peek();
    }
}