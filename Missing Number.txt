Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

 

Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.

/*code 1*/
class Solution {
    public int missingNumber(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            if (!set.contains(nums[i]))
                set.add(nums[i]);
        }
        for (int j = 0; j <= nums.length; j++) {
            if (!set.contains(j))
                return j;
        }
        return -1;
    }
}
/*code 2*/
class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int sum1 = n*(n+1)/2, sum2 = 0;
        for (int i = 0; i < nums.length; i++)
            sum2 += nums[i];
        return sum1 - sum2;
    }
}